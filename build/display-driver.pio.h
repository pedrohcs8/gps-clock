// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------------- //
// displayDriver //
// ------------- //

#define displayDriver_wrap_target 0
#define displayDriver_wrap 8

static const uint16_t displayDriver_program_instructions[] = {
            //     .wrap_target
    0x80a0, //  0: pull   block                      
    0xe027, //  1: set    x, 7                       
    0x6078, //  2: out    null, 24                   
    0x7001, //  3: out    pins, 1         side 0     
    0x1843, //  4: jmp    x--, 3          side 1     
    0xf000, //  5: set    pins, 0         side 0     
    0xe004, //  6: set    pins, 4                    
    0xa042, //  7: nop                               
    0xe000, //  8: set    pins, 0                    
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program displayDriver_program = {
    .instructions = displayDriver_program_instructions,
    .length = 9,
    .origin = -1,
};

static inline pio_sm_config displayDriver_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + displayDriver_wrap_target, offset + displayDriver_wrap);
    sm_config_set_sideset(&c, 2, true, false);
    return c;
}

static const PIO 	pio = pio0;
static const uint	sm = 1;
const uint32_t SHIFT_CLK  = 100 * 1000;	// 100 kHz
#include "hardware/clocks.h"
static inline void init_display_driver(int serialPin) {
  pio_sm_set_pins_with_mask(pio, sm, 0b111u, 0b0u << serialPin);
  pio_sm_set_consecutive_pindirs(pio, sm, serialPin, 3, true);
  // enable the pins
  for (int i = 0; i < 3; i++) {
    pio_gpio_init(pio, serialPin + i);
  }
  uint offset = pio_add_program(pio, &displayDriver_program);
  pio_sm_config c = displayDriver_program_get_default_config(offset);
  sm_config_set_out_shift(&c, false, false, 32);
  // set the pins variable
  sm_config_set_set_pins(&c, serialPin, 3); // Use all available pins
  sm_config_set_sideset_pins(&c, serialPin + 1); // Use srclk pin
  sm_config_set_out_pins(&c, serialPin, 1); // Use serial pin
  // Set state machine clock rate
  float div = (float)clock_get_hz(clk_sys) / (SHIFT_CLK * 2);
  sm_config_set_clkdiv(&c, div);
  pio_sm_init(pio, sm, offset, &c);
  pio_sm_clear_fifos(pio, sm);
  pio_sm_set_enabled(pio, sm, true);
}
void loadData(uint32_t data) {
  while (pio_sm_is_tx_fifo_full(pio,sm)) {
		;
	}
  pio_sm_put_blocking(pio, sm, data);
}

#endif

